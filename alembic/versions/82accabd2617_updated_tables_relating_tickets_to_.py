"""Updated tables relating tickets to prices

Revision ID: 82accabd2617
Revises: a29dcc349914
Create Date: 2024-07-13 12:17:49.527039

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '82accabd2617'
down_revision: Union[str, None] = 'a29dcc349914'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('discount_category',
    sa.Column('discount_id', sa.Integer(), nullable=False),
    sa.Column('category_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['category_id'], ['ticket_category.id'], ),
    sa.ForeignKeyConstraint(['discount_id'], ['discount.id'], ),
    sa.PrimaryKeyConstraint('discount_id', 'category_id')
    )
    # op.drop_index('ix_user_email', table_name='user')
    # op.drop_table('user')
    op.drop_table('event_ticket_link')
    op.add_column('ticket', sa.Column('event_category_id', sa.Integer(), nullable=False))
    op.drop_constraint('ticket_category_id_fkey', 'ticket', type_='foreignkey')
    op.drop_constraint('ticket_event_id_fkey', 'ticket', type_='foreignkey')
    op.create_foreign_key(None, 'ticket', 'event_ticket_category', ['event_category_id'], ['id'])
    op.drop_column('ticket', 'event_id')
    op.drop_column('ticket', 'category_id')
    # sa.Enum('ADMIN', 'MODERATOR', 'VIEWER', name='"UserRole"').drop(op.get_bind())
    # sa.Enum('ADMIN', 'MODERATOR', 'VIEWER', name='userrole').drop(op.get_bind())
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    # sa.Enum('ADMIN', 'MODERATOR', 'VIEWER', name='userrole').create(op.get_bind())
    # sa.Enum('ADMIN', 'MODERATOR', 'VIEWER', name='"UserRole"').create(op.get_bind())
    op.add_column('ticket', sa.Column('category_id', sa.INTEGER(), autoincrement=False, nullable=False))
    op.add_column('ticket', sa.Column('event_id', sa.INTEGER(), autoincrement=False, nullable=True))
    op.drop_constraint(None, 'ticket', type_='foreignkey')
    op.create_foreign_key('ticket_event_id_fkey', 'ticket', 'event', ['event_id'], ['id'])
    op.create_foreign_key('ticket_category_id_fkey', 'ticket', 'ticket_category', ['category_id'], ['id'])
    op.drop_column('ticket', 'event_category_id')
    op.create_table('event_ticket_link',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('event_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('ticket_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['event_id'], ['event.id'], name='event_ticket_link_event_id_fkey'),
    sa.ForeignKeyConstraint(['ticket_id'], ['ticket.id'], name='event_ticket_link_ticket_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='event_ticket_link_pkey')
    )
    # op.create_table('user',
    # sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    # sa.Column('user_name', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    # sa.Column('hashed_password', sa.VARCHAR(length=1024), autoincrement=False, nullable=False),
    # sa.Column('email', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    # sa.Column('phone_number', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    # sa.Column('role', postgresql.ENUM('ADMIN', 'MODERATOR', 'VIEWER', name='userrole', create_type=False), autoincrement=False, nullable=False),
    # sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=False),
    # sa.Column('is_superuser', sa.BOOLEAN(), autoincrement=False, nullable=False),
    # sa.Column('is_verified', sa.BOOLEAN(), autoincrement=False, nullable=False),
    # sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    # sa.PrimaryKeyConstraint('id', name='user_pkey'),
    # sa.UniqueConstraint('phone_number', name='user_phone_number_key'),
    # sa.UniqueConstraint('user_name', name='user_user_name_key')
    # )
    # op.create_index('ix_user_email', 'user', ['email'], unique=False)
    op.drop_table('discount_category')
    # ### end Alembic commands ###
